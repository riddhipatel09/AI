import { GoogleGenAI } from "@google/genai";
import readLineSync from 'readline-sync';

const history = [];
const ai = new GoogleGenAI({apiKey: "AIzaSyCoEZioDLxeWw2mWDR-VsYwnaLF2hOejd8"});

function sum({num1,num2}){
    return num1+num2;
}

function isPrime({num}){
    if(num<2) return false;

    for(let i=2;i<Math.sqrt(num);i++)
        if(num%i==0) return false;

    return true;    
}

async function getCryptoCurrencyPrice({coin}){

    const response = await fetch(`https://api.coingecko.com/api/v3/coins/market?vs_currency=usd&ids=${coin}`);

    const data = await response.json();

    return data;
}

const sumDeclaration = {
    name:'sum',
    description:"get sum of two numbers num1 and num2",
    parameters: {
        type:'OBJECT',
        properties:{
            num1:{
                type:'NUMBER',
                description:"first number num1 for addition"
            },
            num2:{
                type:'NUMBER',
                description:"second number num2 for addition"
            }
        },
        required:['num1','num2']
    }
};
const primeDeclaration = {
    name:'isPrime',
    description:"get if number is prime or not",
    parameters: {
        type:'OBJECT',
        properties:{
            num:{
                type:'NUMBER',
                description:"number num for prime check"
            }     
        },
        required:['num']
    }
};
const cryptoDeclaration = {
    name:'getCryptoCurrencyPrice',
    description:"get the price if the cryptocurrency entered by user",
    parameters: {
        type:'OBJECT',
        properties:{
            coin:{
                type:'STRING',
                description:"name of the coin to check for its price like bitcoin"
            }     
        },
        required:['coin']
    }
};

const availableTools = {
    sum:sum,
    isPrime:isPrime,
    getCryptoCurrencyPrice:getCryptoCurrencyPrice
}

async function runAgent(userProblem){

    history.push({
        role:'user',
        parts:[{text:userProblem}]
    });

    while(true){
    const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: history,
    config:{
        tools:[{
            functionDeclarations: [sumDeclaration,primeDeclaration,cryptoDeclaration]
        }]
    }
  });

  if(response.functionCalls && response.functionCalls.length>0){
    const {name,args}=response.functionCalls[0];

    const funCall = availableTools[name];
    const result = await funCall(args);
    const functionResponsePart = {
        name:name,
        response:{
            result:result
        }
    };

    //model
    history.push({
        role:'model',
        parts:[{
            functionCalls:response.functionCalls[0]
        }]
    });

    //result history
    history.push({
        role:'user',
        parts:[{
            functionResponse:functionResponsePart
        }]
    })
  }
  else{
    history.push({
        role:'model',
        parts:[{text:response.text}]
    });
    console.log(response.text);
    break;
  }

}

}

async function main(){
    const userProblem = readLineSync.question("ask me anything=> ");
    await runAgent(userProblem);
    main();
}

main();
